{"ast":null,"code":"// save-agri-frontend/src/services/api.js\nimport axios from 'axios';\nimport authService from './authService';\n\n// Configuration de l'URL de base pour les requêtes API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n// Configuration de l'intercepteur axios pour ajouter le token d'authentification\naxios.interceptors.request.use(config => {\n  const token = sessionStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Intercepteur pour gérer les réponses\naxios.interceptors.response.use(response => {\n  // Réinitialiser le timer d'inactivité à chaque réponse réussie\n  if (authService.isAuthenticated()) {\n    authService.resetInactivityTimer();\n  }\n  return response;\n}, error => {\n  // Si l'erreur est 401 (non autorisé), déconnexion\n  if (error.response && error.response.status === 401) {\n    authService.logout();\n  }\n  return Promise.reject(error);\n});\n\n// Service pour les opérations liées aux utilisateurs\nconst userService = {\n  // Inscription\n  register: async userData => {\n    try {\n      const response = await axios.post(`${API_URL}/users/register`, userData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Erreur lors de l'inscription:\", error);\n      throw error;\n    }\n  },\n  // Connexion\n  login: async credentials => {\n    try {\n      const response = await axios.post(`${API_URL}/users/login`, credentials);\n      // Vérifier que response.data est défini\n      if (response.data) {\n        // Extraire le token et créer un objet userData à partir des credentials\n        const token = response.data.token;\n        const userData = {\n          username: credentials.username\n          // Vous pouvez ajouter d'autres propriétés ici si nécessaire\n        };\n        if (token) {\n          // Appeler la méthode login du service d'authentification\n          authService.login(userData, token);\n        }\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la connexion:', error);\n      throw error;\n    }\n  },\n  // Déconnexion\n  logout: () => {\n    authService.logout();\n  },\n  // Récupérer le profil de l'utilisateur\n  getUserProfile: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/users/profile`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération du profil:', error);\n      throw error;\n    }\n  }\n};\n\n// Service pour les opérations liées aux farmers\nconst farmerService = {\n  // Recherche par localisation (ville)\n  searchByLocation: async (city, radius = 50) => {\n    try {\n      console.log(`Recherche des producteurs près de ${city} dans un rayon de ${radius}km`);\n      const response = await axios.get(`${API_URL}/farmers`, {\n        params: {\n          city,\n          radius\n        }\n      });\n      console.log('Résultats de la recherche:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche par localisation:', error);\n      throw error;\n    }\n  },\n  // Recherche par coordonnées GPS\n  searchByCoordinates: async (latitude, longitude, radius = 50) => {\n    try {\n      console.log(`Recherche des producteurs aux coordonnées [${latitude}, ${longitude}] dans un rayon de ${radius}km`);\n      const response = await axios.get(`${API_URL}/farmers/coordinates`, {\n        params: {\n          latitude,\n          longitude,\n          radius\n        }\n      });\n      console.log('Résultats de la recherche par coordonnées:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche par coordonnées:', error);\n      throw error;\n    }\n  },\n  // Récupérer les détails d'un producteur\n  getFarmer: async id => {\n    try {\n      const response = await axios.get(`${API_URL}/farmers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du producteur ${id}:`, error);\n      throw error;\n    }\n  },\n  // Créer un nouveau producteur\n  createFarmer: async farmerData => {\n    try {\n      console.log(\"Création d'un nouveau producteur avec les données:\", farmerData);\n      if (farmerData.photo) {\n        const formData = new FormData();\n\n        // Ajouter tous les champs à FormData\n        Object.keys(farmerData).forEach(key => {\n          formData.append(key, farmerData[key]);\n        });\n        const response = await axios.post(`${API_URL}/farmers`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n            // Le token sera ajouté par l'intercepteur\n          }\n        });\n        return response.data;\n      } else {\n        // Si pas de fichier, envoyer comme JSON normal\n        const response = await axios.post(`${API_URL}/farmers`, farmerData);\n        return response.data;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la création du producteur:', error);\n      throw error;\n    }\n  },\n  // Mettre à jour un producteur\n  updateFarmer: async (id, farmerData) => {\n    try {\n      const response = await axios.put(`${API_URL}/farmers/${id}`, farmerData);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la mise à jour du producteur ${id}:`, error);\n      throw error;\n    }\n  },\n  // Supprimer un producteur\n  deleteFarmer: async id => {\n    try {\n      await axios.delete(`${API_URL}/farmers/${id}`);\n      return true;\n    } catch (error) {\n      console.error(`Erreur lors de la suppression du producteur ${id}:`, error);\n      throw error;\n    }\n  }\n};\nexport { farmerService, userService };","map":{"version":3,"names":["axios","authService","API_URL","process","env","REACT_APP_API_URL","interceptors","request","use","config","token","sessionStorage","getItem","headers","error","Promise","reject","response","isAuthenticated","resetInactivityTimer","status","logout","userService","register","userData","post","data","console","login","credentials","username","getUserProfile","get","farmerService","searchByLocation","city","radius","log","params","searchByCoordinates","latitude","longitude","getFarmer","id","createFarmer","farmerData","photo","formData","FormData","Object","keys","forEach","key","append","updateFarmer","put","deleteFarmer","delete"],"sources":["/home/derfm53/save-agri/save-agri-frontend/src/services/api.js"],"sourcesContent":["// save-agri-frontend/src/services/api.js\nimport axios from 'axios';\nimport authService from './authService';\n\n// Configuration de l'URL de base pour les requêtes API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n// Configuration de l'intercepteur axios pour ajouter le token d'authentification\naxios.interceptors.request.use(\n  (config) => {\n    const token = sessionStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Intercepteur pour gérer les réponses\naxios.interceptors.response.use(\n  (response) => {\n    // Réinitialiser le timer d'inactivité à chaque réponse réussie\n    if (authService.isAuthenticated()) {\n      authService.resetInactivityTimer();\n    }\n    return response;\n  },\n  (error) => {\n    // Si l'erreur est 401 (non autorisé), déconnexion\n    if (error.response && error.response.status === 401) {\n      authService.logout();\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Service pour les opérations liées aux utilisateurs\nconst userService = {\n  // Inscription\n  register: async (userData) => {\n    try {\n      const response = await axios.post(`${API_URL}/users/register`, userData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Erreur lors de l'inscription:\", error);\n      throw error;\n    }\n  },\n\n  // Connexion\n  login: async (credentials) => {\n    try {\n      const response = await axios.post(`${API_URL}/users/login`, credentials);\n      // Vérifier que response.data est défini\n      if (response.data) {\n        // Extraire le token et créer un objet userData à partir des credentials\n        const token = response.data.token;\n        const userData = {\n          \n        username: credentials.username\n        // Vous pouvez ajouter d'autres propriétés ici si nécessaire\n      };\n      \n      if (token) {\n        // Appeler la méthode login du service d'authentification\n        authService.login(userData, token);\n      }\n    }\n    \n    return response.data;\n  } catch (error) {\n    console.error('Erreur lors de la connexion:', error);\n    throw error;\n  }\n},\n\n  // Déconnexion\n  logout: () => {\n    authService.logout();\n  },\n\n  // Récupérer le profil de l'utilisateur\n  getUserProfile: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/users/profile`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération du profil:', error);\n      throw error;\n    }\n  }\n};\n\n// Service pour les opérations liées aux farmers\nconst farmerService = {\n  // Recherche par localisation (ville)\n  searchByLocation: async (city, radius = 50) => {\n    try {\n      console.log(`Recherche des producteurs près de ${city} dans un rayon de ${radius}km`);\n      const response = await axios.get(`${API_URL}/farmers`, {\n        params: { city, radius }\n      });\n      console.log('Résultats de la recherche:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche par localisation:', error);\n      throw error;\n    }\n  },\n\n  // Recherche par coordonnées GPS\n  searchByCoordinates: async (latitude, longitude, radius = 50) => {\n    try {\n      console.log(`Recherche des producteurs aux coordonnées [${latitude}, ${longitude}] dans un rayon de ${radius}km`);\n      const response = await axios.get(`${API_URL}/farmers/coordinates`, {\n        params: { latitude, longitude, radius }\n      });\n      console.log('Résultats de la recherche par coordonnées:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche par coordonnées:', error);\n      throw error;\n    }\n  },\n\n  // Récupérer les détails d'un producteur\n  getFarmer: async (id) => {\n    try {\n      const response = await axios.get(`${API_URL}/farmers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du producteur ${id}:`, error);\n      throw error;\n    }\n  },  \n\n  // Créer un nouveau producteur\n  createFarmer: async (farmerData) => {\n    try {\n      console.log(\"Création d'un nouveau producteur avec les données:\", farmerData);\n      if (farmerData.photo) {\n        const formData = new FormData();\n        \n        // Ajouter tous les champs à FormData\n        Object.keys(farmerData).forEach(key => {\n          formData.append(key, farmerData[key]);\n        });\n        \n        const response = await axios.post(`${API_URL}/farmers`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n            // Le token sera ajouté par l'intercepteur\n          }\n        });\n        return response.data;\n      } else {\n        // Si pas de fichier, envoyer comme JSON normal\n        const response = await axios.post(`${API_URL}/farmers`, farmerData);\n        return response.data;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la création du producteur:', error);\n      throw error;\n    }\n  },\n\n  // Mettre à jour un producteur\n  updateFarmer: async (id, farmerData) => {\n    try {\n      const response = await axios.put(`${API_URL}/farmers/${id}`, farmerData);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la mise à jour du producteur ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Supprimer un producteur\n  deleteFarmer: async (id) => {\n    try {\n      await axios.delete(`${API_URL}/farmers/${id}`);\n      return true;\n    } catch (error) {\n      console.error(`Erreur lors de la suppression du producteur ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\nexport { farmerService, userService };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
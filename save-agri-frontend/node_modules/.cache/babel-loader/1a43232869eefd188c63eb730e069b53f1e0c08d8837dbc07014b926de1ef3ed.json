{"ast":null,"code":"// src/services/authService.js\n\n// Configuration du timeout (en minutes)\nconst INACTIVITY_TIMEOUT = 30; // 30 minutes\n\n// Variables locales pour stocker les timers\nlet inactivityTimer = null;\nlet tokenExpiryTimer = null;\nconst authService = {\n  // Connecter l'utilisateur\n  login: (userData, token) => {\n    sessionStorage.setItem('token', token);\n    sessionStorage.setItem('user', JSON.stringify(userData));\n    sessionStorage.setItem('lastActivity', Date.now().toString());\n\n    // Vérifier si userData existe avant de le stocker\n    if (userData) {\n      sessionStorage.setItem('user', JSON.stringify(userData));\n    } else {\n      // Si userData n'existe pas, stockez un objet vide ou les informations minimales\n      sessionStorage.setItem('user', JSON.stringify({\n        username: 'utilisateur'\n      }));\n    }\n    sessionStorage.setItem('lastActivity', Date.now().toString());\n\n    // Démarrer le timer d'inactivité\n    authService.resetInactivityTimer();\n\n    // Vérifier si userData existe et contient exp\n    if (userData && userData.exp) {\n      const expiryTime = userData.exp * 1000 - Date.now();\n      tokenExpiryTimer = setTimeout(() => authService.logout(), expiryTime);\n    }\n  },\n  // Déconnecter l'utilisateur\n  logout: () => {\n    sessionStorage.removeItem('token');\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('lastActivity');\n\n    // Nettoyer les timers\n    if (inactivityTimer) clearTimeout(inactivityTimer);\n    if (tokenExpiryTimer) clearTimeout(tokenExpiryTimer);\n\n    // Rediriger vers la page d'accueil (vous devrez adapter cette partie)\n    window.location.href = '/';\n  },\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    const token = sessionStorage.getItem('token');\n    const lastActivity = sessionStorage.getItem('lastActivity');\n    if (!token || !lastActivity) return false;\n\n    // Vérifier si l'utilisateur est inactif depuis trop longtemps\n    const now = Date.now();\n    const lastActivityTime = parseInt(lastActivity, 10);\n    const inactiveTime = (now - lastActivityTime) / (1000 * 60); // en minutes\n\n    if (inactiveTime > INACTIVITY_TIMEOUT) {\n      authService.logout();\n      return false;\n    }\n\n    // Mettre à jour le temps d'activité\n    sessionStorage.setItem('lastActivity', now.toString());\n    authService.resetInactivityTimer();\n    return true;\n  },\n  // Réinitialiser le timer d'inactivité\n  resetInactivityTimer: () => {\n    if (inactivityTimer) clearTimeout(inactivityTimer);\n    inactivityTimer = setTimeout(() => {\n      // Vérifier si l'utilisateur est toujours inactif\n      const lastActivity = sessionStorage.getItem('lastActivity');\n      if (lastActivity) {\n        const now = Date.now();\n        const lastActivityTime = parseInt(lastActivity, 10);\n        const inactiveTime = (now - lastActivityTime) / (1000 * 60); // en minutes\n\n        if (inactiveTime > INACTIVITY_TIMEOUT) {\n          authService.logout();\n        } else {\n          // Reconfigurer le timer si l'utilisateur est actif\n          authService.resetInactivityTimer();\n        }\n      }\n    }, INACTIVITY_TIMEOUT * 60 * 1000); // Convertir minutes en millisecondes\n  },\n  // Récupérer les données de l'utilisateur connecté\n  getCurrentUser: () => {\n    if (!authService.isAuthenticated()) return null;\n    return JSON.parse(sessionStorage.getItem('user'));\n  },\n  // Récupérer le token d'authentification\n  getToken: () => {\n    if (!authService.isAuthenticated()) return null;\n    return sessionStorage.getItem('token');\n  }\n};\nexport default authService;","map":{"version":3,"names":["INACTIVITY_TIMEOUT","inactivityTimer","tokenExpiryTimer","authService","login","userData","token","sessionStorage","setItem","JSON","stringify","Date","now","toString","username","resetInactivityTimer","exp","expiryTime","setTimeout","logout","removeItem","clearTimeout","window","location","href","isAuthenticated","getItem","lastActivity","lastActivityTime","parseInt","inactiveTime","getCurrentUser","parse","getToken"],"sources":["/home/derfm53/save-agri/save-agri-frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\n\n// Configuration du timeout (en minutes)\nconst INACTIVITY_TIMEOUT = 30; // 30 minutes\n\n// Variables locales pour stocker les timers\nlet inactivityTimer = null;\nlet tokenExpiryTimer = null;\n\nconst authService = {\n  // Connecter l'utilisateur\n  login: (userData, token) => {\n    sessionStorage.setItem('token', token);\n    sessionStorage.setItem('user', JSON.stringify(userData));\n    sessionStorage.setItem('lastActivity', Date.now().toString());\n\n      // Vérifier si userData existe avant de le stocker\n    if (userData) {\n      sessionStorage.setItem('user', JSON.stringify(userData));\n    } else {\n      // Si userData n'existe pas, stockez un objet vide ou les informations minimales\n      sessionStorage.setItem('user', JSON.stringify({ username: 'utilisateur' }));\n    }\n  \n    sessionStorage.setItem('lastActivity', Date.now().toString());\n    \n    // Démarrer le timer d'inactivité\n    authService.resetInactivityTimer();\n\n\n    \n    // Vérifier si userData existe et contient exp\n    if (userData && userData.exp) {\n      const expiryTime = userData.exp * 1000 - Date.now();\n    tokenExpiryTimer = setTimeout(() => authService.logout(), expiryTime);\n  }\n},\n  \n  // Déconnecter l'utilisateur\n  logout: () => {\n    sessionStorage.removeItem('token');\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('lastActivity');\n    \n    // Nettoyer les timers\n    if (inactivityTimer) clearTimeout(inactivityTimer);\n    if (tokenExpiryTimer) clearTimeout(tokenExpiryTimer);\n    \n    // Rediriger vers la page d'accueil (vous devrez adapter cette partie)\n    window.location.href = '/';\n  },\n  \n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    const token = sessionStorage.getItem('token');\n    const lastActivity = sessionStorage.getItem('lastActivity');\n    \n    if (!token || !lastActivity) return false;\n    \n    // Vérifier si l'utilisateur est inactif depuis trop longtemps\n    const now = Date.now();\n    const lastActivityTime = parseInt(lastActivity, 10);\n    const inactiveTime = (now - lastActivityTime) / (1000 * 60); // en minutes\n    \n    if (inactiveTime > INACTIVITY_TIMEOUT) {\n      authService.logout();\n      return false;\n    }\n    \n    // Mettre à jour le temps d'activité\n    sessionStorage.setItem('lastActivity', now.toString());\n    authService.resetInactivityTimer();\n    \n    return true;\n  },\n  \n  // Réinitialiser le timer d'inactivité\n  resetInactivityTimer: () => {\n    if (inactivityTimer) clearTimeout(inactivityTimer);\n    \n    inactivityTimer = setTimeout(() => {\n      // Vérifier si l'utilisateur est toujours inactif\n      const lastActivity = sessionStorage.getItem('lastActivity');\n      if (lastActivity) {\n        const now = Date.now();\n        const lastActivityTime = parseInt(lastActivity, 10);\n        const inactiveTime = (now - lastActivityTime) / (1000 * 60); // en minutes\n        \n        if (inactiveTime > INACTIVITY_TIMEOUT) {\n          authService.logout();\n        } else {\n          // Reconfigurer le timer si l'utilisateur est actif\n          authService.resetInactivityTimer();\n        }\n      }\n    }, INACTIVITY_TIMEOUT * 60 * 1000); // Convertir minutes en millisecondes\n  },\n  \n  // Récupérer les données de l'utilisateur connecté\n  getCurrentUser: () => {\n    if (!authService.isAuthenticated()) return null;\n    return JSON.parse(sessionStorage.getItem('user'));\n  },\n  \n  // Récupérer le token d'authentification\n  getToken: () => {\n    if (!authService.isAuthenticated()) return null;\n    return sessionStorage.getItem('token');\n  }\n};\n\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
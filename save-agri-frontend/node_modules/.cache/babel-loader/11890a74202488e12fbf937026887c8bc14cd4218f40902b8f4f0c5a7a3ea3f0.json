{"ast":null,"code":"import axios from 'axios';\n\n// Configuration de l'URL de base pour les requêtes API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Configuration de l'intercepteur axios pour ajouter le token d'authentification\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Service pour les opérations liées aux farmers\nconst farmerService = {\n  // Recherche par localisation (ville)\n  searchByLocation: async (city, radius = 50) => {\n    try {\n      console.log(`Recherche des producteurs près de ${city} dans un rayon de ${radius}km`);\n      const response = await axios.get(`${API_URL}/farmers`, {\n        params: {\n          city,\n          radius\n        }\n      });\n      console.log('Résultats de la recherche:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche par localisation:', error);\n      throw error;\n    }\n  },\n  // Recherche par coordonnées GPS\n  searchByCoordinates: async (latitude, longitude, radius = 50) => {\n    try {\n      console.log(`Recherche des producteurs aux coordonnées [${latitude}, ${longitude}] dans un rayon de ${radius}km`);\n      const response = await axios.get(`${API_URL}/farmers/coordinates`, {\n        params: {\n          latitude,\n          longitude,\n          radius\n        }\n      });\n      console.log('Résultats de la recherche par coordonnées:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche par coordonnées:', error);\n      throw error;\n    }\n  },\n  // Récupérer les détails d'un producteur\n  getFarmer: async id => {\n    try {\n      const response = await axios.get(`${API_URL}/farmers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du producteur ${id}:`, error);\n      throw error;\n    }\n  },\n  // Créer un nouveau producteur\n  createFarmer: async farmerData => {\n    try {\n      console.log(\"Création d'un nouveau producteur avec les données:\", farmerData);\n      const response = await axios.post(`${API_URL}/farmers`, farmerData);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la création du producteur:', error);\n      throw error;\n    }\n  },\n  // Mettre à jour un producteur\n  updateFarmer: async (id, farmerData) => {\n    try {\n      const response = await axios.put(`${API_URL}/farmers/${id}`, farmerData);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la mise à jour du producteur ${id}:`, error);\n      throw error;\n    }\n  },\n  // Supprimer un producteur\n  deleteFarmer: async id => {\n    try {\n      await axios.delete(`${API_URL}/farmers/${id}`);\n      return true;\n    } catch (error) {\n      console.error(`Erreur lors de la suppression du producteur ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Service pour les opérations liées aux utilisateurs\nconst userService = {\n  // Inscription\n  register: async userData => {\n    try {\n      const response = await axios.post(`${API_URL}/users/register`, userData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Erreur lors de l'inscription:\", error);\n      throw error;\n    }\n  },\n  // Connexion\n  login: async credentials => {\n    try {\n      const response = await axios.post(`${API_URL}/users/login`, credentials);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la connexion:', error);\n      throw error;\n    }\n  },\n  // Déconnexion\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  // Récupérer le profil de l'utilisateur\n  getUserProfile: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/users/profile`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération du profil:', error);\n      throw error;\n    }\n  }\n};\nexport { farmerService, userService };","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","farmerService","searchByLocation","city","radius","console","log","response","get","params","data","searchByCoordinates","latitude","longitude","getFarmer","id","createFarmer","farmerData","post","updateFarmer","put","deleteFarmer","delete","userService","register","userData","login","credentials","setItem","JSON","stringify","user","logout","removeItem","getUserProfile"],"sources":["/home/derfm53/save-agri/save-agri-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuration de l'URL de base pour les requêtes API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n// Configuration de l'intercepteur axios pour ajouter le token d'authentification\naxios.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Service pour les opérations liées aux farmers\nconst farmerService = {\n  // Recherche par localisation (ville)\n  searchByLocation: async (city, radius = 50) => {\n    try {\n      console.log(`Recherche des producteurs près de ${city} dans un rayon de ${radius}km`);\n      const response = await axios.get(`${API_URL}/farmers`, {\n        params: { city, radius }\n      });\n      console.log('Résultats de la recherche:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche par localisation:', error);\n      throw error;\n    }\n  },\n\n  // Recherche par coordonnées GPS\n  searchByCoordinates: async (latitude, longitude, radius = 50) => {\n    try {\n      console.log(`Recherche des producteurs aux coordonnées [${latitude}, ${longitude}] dans un rayon de ${radius}km`);\n      const response = await axios.get(`${API_URL}/farmers/coordinates`, {\n        params: { latitude, longitude, radius }\n      });\n      console.log('Résultats de la recherche par coordonnées:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche par coordonnées:', error);\n      throw error;\n    }\n  },\n\n  // Récupérer les détails d'un producteur\n  getFarmer: async (id) => {\n    try {\n      const response = await axios.get(`${API_URL}/farmers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du producteur ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Créer un nouveau producteur\n  createFarmer: async (farmerData) => {\n    try {\n      console.log(\"Création d'un nouveau producteur avec les données:\", farmerData);\n      const response = await axios.post(`${API_URL}/farmers`, farmerData);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la création du producteur:', error);\n      throw error;\n    }\n  },\n\n  // Mettre à jour un producteur\n  updateFarmer: async (id, farmerData) => {\n    try {\n      const response = await axios.put(`${API_URL}/farmers/${id}`, farmerData);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la mise à jour du producteur ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Supprimer un producteur\n  deleteFarmer: async (id) => {\n    try {\n      await axios.delete(`${API_URL}/farmers/${id}`);\n      return true;\n    } catch (error) {\n      console.error(`Erreur lors de la suppression du producteur ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Service pour les opérations liées aux utilisateurs\nconst userService = {\n  // Inscription\n  register: async (userData) => {\n    try {\n      const response = await axios.post(`${API_URL}/users/register`, userData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Erreur lors de l'inscription:\", error);\n      throw error;\n    }\n  },\n\n  // Connexion\n  login: async (credentials) => {\n    try {\n      const response = await axios.post(`${API_URL}/users/login`, credentials);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la connexion:', error);\n      throw error;\n    }\n  },\n\n  // Déconnexion\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n\n  // Récupérer le profil de l'utilisateur\n  getUserProfile: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/users/profile`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération du profil:', error);\n      throw error;\n    }\n  }\n};\n\nexport { farmerService, userService };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
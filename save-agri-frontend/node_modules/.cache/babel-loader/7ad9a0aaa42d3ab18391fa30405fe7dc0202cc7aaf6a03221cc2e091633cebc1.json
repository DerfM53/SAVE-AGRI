{"ast":null,"code":"import axios from 'axios';\n\n// Configuration de l'API avec l'URL de base\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n// Création d'une instance axios avec la configuration de base\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour ajouter le token d'authentification si disponible\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Services API pour les farmers\nexport const farmerService = {\n  // Rechercher des agriculteurs par localisation\n  searchByLocation: async (city, radius) => {\n    try {\n      const response = await api.get(`/farmers`, {\n        params: {\n          city,\n          radius\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche des agriculteurs:', error);\n      throw error;\n    }\n  },\n  // Rechercher des agriculteurs par coordonnées\n  searchByCoordinates: async (latitude, longitude, radius) => {\n    try {\n      const response = await api.get(`/farmers`, {\n        params: {\n          latitude,\n          longitude,\n          radius\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche des agriculteurs par coordonnées:', error);\n      throw error;\n    }\n  },\n  // Obtenir les détails d'un agriculteur spécifique\n  getById: async id => {\n    try {\n      const response = await api.get(`/farmers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération de l'agriculteur ${id}:`, error);\n      throw error;\n    }\n  },\n  // Créer un nouvel agriculteur\n  create: async farmerData => {\n    try {\n      const response = await api.post('/farmers', farmerData);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la création de l\\'agriculteur:', error);\n      throw error;\n    }\n  },\n  // Mettre à jour un agriculteur existant\n  update: async (id, farmerData) => {\n    try {\n      const response = await api.put(`/farmers/${id}`, farmerData);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la mise à jour de l'agriculteur ${id}:`, error);\n      throw error;\n    }\n  },\n  // Supprimer un agriculteur\n  delete: async id => {\n    try {\n      await api.delete(`/farmers/${id}`);\n      return true;\n    } catch (error) {\n      console.error(`Erreur lors de la suppression de l'agriculteur ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Services API pour les utilisateurs\nexport const userService = {\n  // Connexion utilisateur\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la connexion:', error);\n      throw error;\n    }\n  },\n  // Inscription utilisateur\n  register: async userData => {\n    try {\n      const response = await api.post('/users', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de l\\'inscription:', error);\n      throw error;\n    }\n  },\n  // Déconnexion\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  },\n  // Obtenir l'utilisateur courant\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n};\n\n// Services API pour les produits\nexport const productService = {\n  // Obtenir les produits d'un agriculteur\n  getByFarmer: async farmerId => {\n    try {\n      const response = await api.get(`/farmers/${farmerId}/products`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération des produits du fermier ${farmerId}:`, error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","farmerService","searchByLocation","city","radius","response","get","params","data","console","searchByCoordinates","latitude","longitude","getById","id","farmerData","post","update","put","delete","userService","login","credentials","setItem","JSON","stringify","user","register","userData","logout","removeItem","isAuthenticated","getCurrentUser","parse","productService","getByFarmer","farmerId"],"sources":["/home/derfm53/save-agri/save-agri-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuration de l'API avec l'URL de base\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n// Création d'une instance axios avec la configuration de base\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Intercepteur pour ajouter le token d'authentification si disponible\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Services API pour les farmers\nexport const farmerService = {\n  // Rechercher des agriculteurs par localisation\n  searchByLocation: async (city, radius) => {\n    try {\n      const response = await api.get(`/farmers`, {\n        params: { city, radius }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche des agriculteurs:', error);\n      throw error;\n    }\n  },\n  \n  // Rechercher des agriculteurs par coordonnées\n  searchByCoordinates: async (latitude, longitude, radius) => {\n    try {\n      const response = await api.get(`/farmers`, {\n        params: { latitude, longitude, radius }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la recherche des agriculteurs par coordonnées:', error);\n      throw error;\n    }\n  },\n  \n  // Obtenir les détails d'un agriculteur spécifique\n  getById: async (id) => {\n    try {\n      const response = await api.get(`/farmers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération de l'agriculteur ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  // Créer un nouvel agriculteur\n  create: async (farmerData) => {\n    try {\n      const response = await api.post('/farmers', farmerData);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la création de l\\'agriculteur:', error);\n      throw error;\n    }\n  },\n  \n  // Mettre à jour un agriculteur existant\n  update: async (id, farmerData) => {\n    try {\n      const response = await api.put(`/farmers/${id}`, farmerData);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la mise à jour de l'agriculteur ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  // Supprimer un agriculteur\n  delete: async (id) => {\n    try {\n      await api.delete(`/farmers/${id}`);\n      return true;\n    } catch (error) {\n      console.error(`Erreur lors de la suppression de l'agriculteur ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Services API pour les utilisateurs\nexport const userService = {\n  // Connexion utilisateur\n  login: async (credentials) => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la connexion:', error);\n      throw error;\n    }\n  },\n  \n  // Inscription utilisateur\n  register: async (userData) => {\n    try {\n      const response = await api.post('/users', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de l\\'inscription:', error);\n      throw error;\n    }\n  },\n  \n  // Déconnexion\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  \n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  },\n  \n  // Obtenir l'utilisateur courant\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n};\n\n// Services API pour les produits\nexport const productService = {\n  // Obtenir les produits d'un agriculteur\n  getByFarmer: async (farmerId) => {\n    try {\n      const response = await api.get(`/farmers/${farmerId}/products`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération des produits du fermier ${farmerId}:`, error);\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}